/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package userinterface;

import business.Mail;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.text.SimpleDateFormat;
import business.mysql.MySql;
import java.awt.Image;
import javax.swing.JOptionPane;
import java.sql.SQLException;
import java.sql.ResultSet;
import java.text.ParseException;
import java.time.DayOfWeek;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.table.DefaultTableModel;
import static userinterface.UserHomePage.balanceLabel;
import static userinterface.UserHomePage.userNameLabel;

/**
 *
 * @author nbabu
 */
public class BookEventTickets extends javax.swing.JFrame{

    /**
     * Creates new form BookEventTickets
     */
    public BookEventTickets() {
        initComponents();
        try
        {
            MySql.createConn();
            ResultSet rs = MySql.selectQuery("select * from cities;");
            while(rs.next())
            {
                cityComboBox.addItem(rs.getString(2));
            }
            cityComboBox.setSelectedItem(null);
            calendar.setEnabled(false);
        }
        catch(SQLException ex)
        {
          System.out.println(ex);
        }
        finally
        {
          MySql.shutDownConn();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        customerNameField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        mobileNumberField = new javax.swing.JTextField();
        jLabel39 = new javax.swing.JLabel();
        eventsComboBox = new javax.swing.JComboBox<>();
        cityComboBox = new javax.swing.JComboBox<>();
        jLabel40 = new javax.swing.JLabel();
        jLabel42 = new javax.swing.JLabel();
        jLabel43 = new javax.swing.JLabel();
        clearButton = new javax.swing.JButton();
        bookTicketButton = new javax.swing.JButton();
        jLabel45 = new javax.swing.JLabel();
        priceField = new javax.swing.JTextField();
        seatComboBox = new javax.swing.JComboBox<>();
        calendar = new com.toedter.calendar.JDateChooser();
        nL = new javax.swing.JLabel();
        mL = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        bookingHistoryTable = new javax.swing.JTable();
        showHistoryButton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        eventIdField = new javax.swing.JTextField();
        cancelBookingButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jTabbedPane1.setBackground(new java.awt.Color(102, 102, 102));
        jTabbedPane1.setForeground(new java.awt.Color(255, 255, 255));
        jTabbedPane1.setTabPlacement(javax.swing.JTabbedPane.LEFT);

        jPanel1.setBackground(new java.awt.Color(51, 51, 51));
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));
        jPanel1.setPreferredSize(new java.awt.Dimension(900, 800));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 204, 255));
        jLabel1.setText("Book Event Tickets");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 10, -1, -1));

        jLabel2.setBackground(new java.awt.Color(0, 0, 0));
        jLabel2.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(204, 204, 204));
        jLabel2.setText("Customer Name");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 100, -1, -1));

        customerNameField.setBackground(new java.awt.Color(0, 0, 0));
        customerNameField.setForeground(new java.awt.Color(204, 204, 204));
        customerNameField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                customerNameFieldKeyReleased(evt);
            }
        });
        jPanel1.add(customerNameField, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 100, 180, -1));

        jLabel4.setBackground(new java.awt.Color(0, 0, 0));
        jLabel4.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(204, 204, 204));
        jLabel4.setText("Customer Mobile No");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 140, -1, -1));

        mobileNumberField.setBackground(new java.awt.Color(0, 0, 0));
        mobileNumberField.setForeground(new java.awt.Color(204, 204, 204));
        mobileNumberField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                mobileNumberFieldKeyReleased(evt);
            }
        });
        jPanel1.add(mobileNumberField, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 140, 180, -1));

        jLabel39.setBackground(new java.awt.Color(0, 0, 0));
        jLabel39.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jLabel39.setForeground(new java.awt.Color(204, 204, 204));
        jLabel39.setText("City");
        jPanel1.add(jLabel39, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 180, -1, -1));

        eventsComboBox.setBackground(new java.awt.Color(0, 0, 0));
        eventsComboBox.setForeground(new java.awt.Color(204, 204, 204));
        eventsComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                eventsComboBoxItemStateChanged(evt);
            }
        });
        jPanel1.add(eventsComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 280, 200, -1));

        cityComboBox.setBackground(new java.awt.Color(0, 0, 0));
        cityComboBox.setForeground(new java.awt.Color(204, 204, 204));
        cityComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cityComboBoxItemStateChanged(evt);
            }
        });
        jPanel1.add(cityComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 180, 180, -1));

        jLabel40.setBackground(new java.awt.Color(0, 0, 0));
        jLabel40.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jLabel40.setForeground(new java.awt.Color(204, 204, 204));
        jLabel40.setText("Events");
        jPanel1.add(jLabel40, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 280, -1, -1));

        jLabel42.setBackground(new java.awt.Color(0, 0, 0));
        jLabel42.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jLabel42.setForeground(new java.awt.Color(204, 204, 204));
        jLabel42.setText("Select seat number");
        jPanel1.add(jLabel42, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 390, -1, -1));

        jLabel43.setBackground(new java.awt.Color(0, 0, 0));
        jLabel43.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jLabel43.setForeground(new java.awt.Color(204, 204, 204));
        jLabel43.setText("Select a date");
        jPanel1.add(jLabel43, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 230, -1, -1));

        clearButton.setBackground(new java.awt.Color(102, 204, 255));
        clearButton.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        clearButton.setForeground(new java.awt.Color(255, 255, 255));
        clearButton.setText("Clear");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });
        jPanel1.add(clearButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 450, 110, 30));

        bookTicketButton.setBackground(new java.awt.Color(102, 204, 255));
        bookTicketButton.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        bookTicketButton.setForeground(new java.awt.Color(255, 255, 255));
        bookTicketButton.setText("Book Ticket");
        bookTicketButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookTicketButtonActionPerformed(evt);
            }
        });
        jPanel1.add(bookTicketButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 450, 110, 30));

        jLabel45.setBackground(new java.awt.Color(0, 0, 0));
        jLabel45.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jLabel45.setForeground(new java.awt.Color(204, 204, 204));
        jLabel45.setText("Price");
        jPanel1.add(jLabel45, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 340, -1, -1));

        priceField.setBackground(new java.awt.Color(0, 0, 0));
        priceField.setForeground(new java.awt.Color(204, 204, 204));
        priceField.setEnabled(false);
        jPanel1.add(priceField, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 340, 200, -1));

        seatComboBox.setBackground(new java.awt.Color(0, 0, 0));
        seatComboBox.setForeground(new java.awt.Color(204, 204, 204));
        jPanel1.add(seatComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 390, 200, -1));

        calendar.setBackground(new java.awt.Color(0, 0, 0));
        calendar.setForeground(new java.awt.Color(204, 204, 204));
        calendar.setEnabled(false);
        calendar.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                calendarPropertyChange(evt);
            }
        });
        jPanel1.add(calendar, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 230, 220, -1));
        calendar.setMinSelectableDate(new Date(new Date().getTime() + 86400 * 1000));
        jPanel1.add(nL, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 100, 20, 20));
        jPanel1.add(mL, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 140, 20, 20));

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/music.png"))); // NOI18N
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 40, 140, 130));

        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/dancing.png"))); // NOI18N
        jPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 40, 130, 130));

        jTabbedPane1.addTab("Book Events", jPanel1);

        jPanel2.setBackground(new java.awt.Color(51, 51, 51));
        jPanel2.setForeground(new java.awt.Color(204, 204, 204));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel3.setFont(new java.awt.Font("Helvetica Neue", 1, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(102, 204, 255));
        jLabel3.setText(" Booking History");
        jPanel2.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 20, -1, -1));

        bookingHistoryTable.setBackground(new java.awt.Color(51, 51, 51));
        bookingHistoryTable.setForeground(new java.awt.Color(204, 204, 204));
        bookingHistoryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Booking Id", "Customer Name", "Mobile", "City", "Event Name", "Seat", "Price", "Booking date", "Event date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
            @Override
            public boolean isCellEditable(int row, int column) {
                //all cells false
                return false;
            }
        });
        jScrollPane1.setViewportView(bookingHistoryTable);

        jPanel2.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 90, 730, 200));

        showHistoryButton.setBackground(new java.awt.Color(102, 204, 255));
        showHistoryButton.setForeground(new java.awt.Color(255, 255, 255));
        showHistoryButton.setText("Show");
        showHistoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showHistoryButtonActionPerformed(evt);
            }
        });
        jPanel2.add(showHistoryButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 30, -1, -1));

        jTabbedPane1.addTab("Show Bookings", jPanel2);

        jPanel3.setBackground(new java.awt.Color(51, 51, 51));
        jPanel3.setForeground(new java.awt.Color(255, 255, 255));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel5.setFont(new java.awt.Font("Helvetica Neue", 1, 24)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(102, 204, 255));
        jLabel5.setText("CANCEL Bookings");
        jPanel3.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(334, 14, -1, -1));

        jLabel6.setBackground(new java.awt.Color(0, 0, 0));
        jLabel6.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(204, 204, 204));
        jLabel6.setText("Enter the Event booking ID");
        jPanel3.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 100, -1, -1));

        eventIdField.setBackground(new java.awt.Color(0, 0, 0));
        eventIdField.setForeground(new java.awt.Color(204, 204, 204));
        eventIdField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eventIdFieldActionPerformed(evt);
            }
        });
        jPanel3.add(eventIdField, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 100, 120, -1));

        cancelBookingButton.setBackground(new java.awt.Color(102, 204, 255));
        cancelBookingButton.setForeground(new java.awt.Color(255, 255, 255));
        cancelBookingButton.setText("Cancel");
        cancelBookingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBookingButtonActionPerformed(evt);
            }
        });
        jPanel3.add(cancelBookingButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 100, 70, -1));

        jTabbedPane1.addTab("Delete Bookings", jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 541, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public boolean clientSideValidation(JFrame frame, String customer_name, String customer_contact)
    {
        if(Pattern.compile("^[a-zA-Z\\s]*$").matcher(customer_name).matches() && !customer_name.equals(""))
        {
           if(Pattern.compile("^\\d{10}$").matcher(customer_contact).matches())
           {
             return true;
           }
           else
            JOptionPane.showMessageDialog(frame, "Contact number is not valid.\nOnly numbers are allowed.", "Alert", JOptionPane.WARNING_MESSAGE);      
        }
        else
            JOptionPane.showMessageDialog(frame, "Customer name is not valid.\nOnly characters and spaces are allowed.", "Alert", JOptionPane.WARNING_MESSAGE);  
      return false;
    }
    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        // TODO add your handling code here:
        customerNameField.setText("");
        mobileNumberField.setText("");
        cityComboBox.setSelectedItem(null);
        calendar.setCalendar(null);
        eventsComboBox.removeAllItems();
        priceField.setText("");
        calendar.setEnabled(false);
        seatComboBox.removeAllItems();
    }//GEN-LAST:event_clearButtonActionPerformed

    private void bookTicketButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookTicketButtonActionPerformed
        // TODO add your handling code here:
        String customerName = customerNameField.getText().trim();
        String customerContact = mobileNumberField.getText().trim();
        boolean passed = clientSideValidation(this, customerName, customerContact);
        if(passed)
        {
            try
            {
                String city = cityComboBox.getSelectedItem().toString();
                String[] event = eventsComboBox.getSelectedItem().toString().split(" ");
                String event_name = event[0];
                String ticket_price = priceField.getText();
                String seat_no = seatComboBox.getSelectedItem().toString();
                double price = Double.parseDouble(priceField.getText());
                SimpleDateFormat date_format = new SimpleDateFormat("yyyy-MM-dd");
                String date = date_format.format(calendar.getDate());
                MySql.createConn();
                String query = "select userid, balance, email from users where username = " + "\'" + userNameLabel.getText() + "\'" + ";";
                ResultSet rs = MySql.selectQuery(query);
                rs.next();
                int user_id = rs.getInt(1);
                double balance = rs.getDouble(2);
                double available_balance = balance - price;
                String email = rs.getString(3);
                if(available_balance < 0)
                {
                    JOptionPane.showMessageDialog(this, "The available wallet balance is less than the amount \nthat you're trying to transfer.", "Alert", JOptionPane.WARNING_MESSAGE);
                    return;
                }
                query = "select id from events where event_name = " + "\'" + event_name + "\'";
                rs = MySql.selectQuery(query);
                rs.next();
                int event_id = rs.getInt(1);
                query = "select count(*) from event_bookings where event_id = " + event_id + " and seat_position = " + seat_no + ";";
                rs = MySql.selectQuery(query);
                rs.next();
                if(rs.getInt(1) > 0)
                {
                    JOptionPane.showMessageDialog(this, "Someone has booked the seat, please book another seat for the event.", "Alert", JOptionPane.WARNING_MESSAGE);
                    return;
                }
                query = "insert into event_bookings(user_id, event_id, seat_position, booking_date, event_date, customer_name, customer_mobile) values(" + user_id + "," + event_id + "," + seat_no + "," + "CURDATE()" + "," + "\'" + date + "\'" + "," + "\'" + customerName + "\'" + "," + "\'" + customerContact + "\'" + ");";
                int res = MySql.insertUpdateQuery(query);
                if(res > 0)
                {
                    JOptionPane.showMessageDialog(this, "Ticket booked successfully.", null, JOptionPane.OK_OPTION);
                    query = "update users set balance = balance - " + price + " where username = " + "\'" + userNameLabel.getText() + "\'" + ";";
                    res = MySql.insertUpdateQuery(query);
                    if(res > 0)
                    {
                        balanceLabel.setText("$ " + available_balance);
                        String message = "****************************\n";
                        message += "**********EVENT TICKET*********\n";
                        message += "*****************************\n";
                        message += "Customer: " + customerName + "\n";
                        message += "Contact Number: " + customerContact + "\n";
                        message += "City: " + city + "\n";
                        message += "SeatNo: " + seat_no + "\n";
                        message += "Price: " + ticket_price + "\n";
                        message += "Event Date: " + date + "\n";
                        message += "**********^^^^^^^^^**********\n";
                        message += "******Thank You Come Again!!******\n";
                        Mail.sendMail(email, message);
                    }
                    
                }
            }
            catch(SQLException ex)
            {
                System.out.println(ex);
            }
            catch(NullPointerException ex)
            {
                JOptionPane.showMessageDialog(this, "Please choose from Location, date and the event.", "Alert", JOptionPane.WARNING_MESSAGE);
            }
        }
    }//GEN-LAST:event_bookTicketButtonActionPerformed

    private void cityComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cityComboBoxItemStateChanged
        // TODO add your handling code here:

      if(evt != null && evt.getSource().toString() != null && evt.getStateChange() == java.awt.event.ItemEvent.SELECTED)
      {
        calendar.setEnabled(true);
      }  
    }//GEN-LAST:event_cityComboBoxItemStateChanged

    private void calendarPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_calendarPropertyChange
        // TODO add your handling code here:
        SimpleDateFormat date_format = new SimpleDateFormat("yyyy-MM-dd");
        if(calendar.getDate() != null)
        {
            String date = date_format.format(calendar.getDate());
            System.out.println(date);
            try
            {
                MySql.createConn();
                String city_query = "select id from cities where city_name = " + "\'" + cityComboBox.getSelectedItem().toString() + "\'" + ";";
                System.out.println(city_query);
                ResultSet rs = MySql.selectQuery(city_query);

                rs.next();
                int city_id = rs.getInt(1);

                String query  = "select CONCAT(event_name,' ',start_at) from events where event_city = " + city_id + " and event_date = " + "\'"+date+ "\'" +";";
                rs = MySql.selectQuery(query);
                eventsComboBox.removeAllItems();
                while(rs.next()){
                    eventsComboBox.addItem(rs.getString(1));
                }
            }
            catch(SQLException ex)
            {
                System.out.println(ex);
            }
            finally
            {
                MySql.shutDownConn();
            }
        }
    }//GEN-LAST:event_calendarPropertyChange

    private void eventsComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_eventsComboBoxItemStateChanged
        // TODO add your handling code here:
        if(evt != null && evt.getSource().toString() != null && evt.getStateChange() == java.awt.event.ItemEvent.SELECTED)
        {
            try
            {
                String s = eventsComboBox.getSelectedItem().toString();
                String first = s.substring(0,s.indexOf(' '));
                MySql.createConn();
                String query = "select price from events where event_name ='"+first+"';";
                System.out.println(query);
                ResultSet rs = MySql.selectQuery(query);
                if(rs.next()){
                    priceField.setText(rs.getString(1));
                }
                String query1 = "select id from events where event_name ='"+first+"'; ";
                System.out.println(query1);
                rs = MySql.selectQuery(query1);
                rs.next();
                int event_id = rs.getInt(1);
                System.out.println(event_id);
                String query2  = "select seat_position from event_bookings where event_id = " + event_id + ";";
                rs = MySql.selectQuery(query2);
                ArrayList<Integer> seats = new ArrayList<>();
                for(int i = 1; i <31 ; i++)
                {
                    seats.add(i);
                }
                while(rs.next())
                {
                    seats.remove(Integer.valueOf(rs.getInt(1)));
                }
                seatComboBox.removeAllItems();
                for(int i : seats)
                {
                    seatComboBox.addItem(String.valueOf(i));
                }
            }
            catch(SQLException ex)
            {
                System.out.println(ex);
            }
            finally
            {
                MySql.shutDownConn();
            }
        }
    }//GEN-LAST:event_eventsComboBoxItemStateChanged

    private void eventIdFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eventIdFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_eventIdFieldActionPerformed

    private void showHistoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showHistoryButtonActionPerformed
        // TODO add your handling code here:        
        try
        {
            MySql.createConn();
            String query = "select userid from users where username = " + "\'" + userNameLabel.getText() + "\'" + ";";
            ResultSet rs = MySql.selectQuery(query);
            rs.next();
            int user_id = rs.getInt(1);            
            query = "select * from event_bookings where user_id = " + user_id + " order by booking_date DESC;";
            rs = MySql.selectQuery(query);            
            DefaultTableModel table_model = (DefaultTableModel)bookingHistoryTable.getModel();
            table_model.setRowCount(0);
            while(rs.next())
            {                       
                String booking_id = String.valueOf(rs.getInt(1));
                String customer_name = String.valueOf(rs.getString(7));
                String customer_mobile = String.valueOf(rs.getString(8));                
                String event_id = String.valueOf(rs.getInt(3));
                String query1 = "select * from events where id = " + event_id + ";";
                ResultSet rs1 = MySql.selectQuery(query1);
                rs1.next();
                String eventName = rs1.getString(2);                
                int cityId = rs1.getInt(3);
                String price = "$ " + rs1.getString(6);
                String query2 = "select city_name from cities where id = " + cityId + ";";
                ResultSet rs2 = MySql.selectQuery(query2);
                rs2.next();
                String city = rs2.getString(1);
                String seat_position= String.valueOf(rs.getInt(4));
                String booking_date = String.valueOf(rs.getDate(5));
                String event_date = String.valueOf(rs.getDate(6));                    
                String table_data[]={booking_id,customer_name, customer_mobile, city, eventName, seat_position, price, booking_date, event_date};
                table_model.addRow(table_data);
            }
        }
        catch(SQLException ex)
        {
            System.out.println(ex);
        }
        finally
        {
            MySql.shutDownConn();
        }
    }//GEN-LAST:event_showHistoryButtonActionPerformed
    public boolean clientSideValidation(JFrame frame, String bookingId)
    {
        if(Pattern.compile("^[1-9]\\d*$").matcher(bookingId).matches())
        {
          return true;
        }
        else
         JOptionPane.showMessageDialog(frame, "Booking Id is not valid.\nOnly numbers are allowed.", "Alert", JOptionPane.WARNING_MESSAGE);        
        return false;
    }
    private void cancelBookingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBookingButtonActionPerformed
        // TODO add your handling code here:
        String eventID = eventIdField.getText().trim();
        boolean passed = clientSideValidation(this, eventID);
        if(passed)
        {
            try
            {
                MySql.createConn();
                String query = "select userid, balance, email from users where username = " + "\'" + userNameLabel.getText() + "\'" + ";";
                ResultSet rs = MySql.selectQuery(query);
                rs.next();
                int user_id = rs.getInt(1);
                double balance = rs.getDouble(2);
                String email = rs.getString(3);
                query = "select event_id from event_bookings where id = " + eventID + " and user_id = " + user_id + ";";
                rs = MySql.selectQuery(query);
                if(rs.isBeforeFirst())
                {
                    rs.next();
                    int event_id = rs.getInt(1);
                    query = "select price from events where id = " + event_id + ";";
                    rs = MySql.selectQuery(query);
                    rs.next();
                    int price = rs.getInt(1);
                    double available_balance = balance + price;
                    query = "delete from event_bookings where id = " + eventID + " and event_date > CURDATE() and user_id = " + user_id + ";";
                    int res = MySql.insertUpdateQuery(query);
                    if(res > 0)
                    {
                        query = "update users set balance = balance + " + price + " where username = " + "\'" + userNameLabel.getText() + "\'" + ";";
                        res = MySql.insertUpdateQuery(query);
                        if(res > 0)
                        {
                            JOptionPane.showMessageDialog(this, "Cancelled the booking successfully.", null, JOptionPane.OK_OPTION);
                            balanceLabel.setText("$ " + available_balance);
                            Mail.sendMail(email, "You have cancelled your event ticket with the Id: " + eventID + "\nRefund has been added to your wallet balance.");
                        }
                    }
                    else
                    {
                        JOptionPane.showMessageDialog(this, "You can\'t cancel the ticket now.", null, JOptionPane.WARNING_MESSAGE);
                    }
                }
                else
                  JOptionPane.showMessageDialog(this, "Booking Id is not valid.\nPlease give another Id.", null, JOptionPane.WARNING_MESSAGE);
            }
            catch(SQLException ex)
            {
                System.out.println(ex);
            }
            finally
            {
                MySql.shutDownConn();
            }
        }

    }//GEN-LAST:event_cancelBookingButtonActionPerformed

    private void customerNameFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_customerNameFieldKeyReleased
        // TODO add your handling code here:
        String customer_name = customerNameField.getText().trim();
        if(Pattern.compile("^[a-zA-Z\\s]*$").matcher(customer_name).matches() && !customer_name.equals(""))
        {
            ImageIcon icon = new ImageIcon("target/classes/images/accept.png");
            Image img = icon.getImage();
            Image imgScale = img.getScaledInstance(nL.getWidth(), nL.getHeight(), Image.SCALE_SMOOTH);
            ImageIcon scaledIcon = new ImageIcon(imgScale);
            nL.setIcon(scaledIcon);
        }
        else
        {

            ImageIcon icon = new ImageIcon("target/classes/images/cross.png");
            nL.setIcon(icon);
        }
    }//GEN-LAST:event_customerNameFieldKeyReleased

    private void mobileNumberFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_mobileNumberFieldKeyReleased
        // TODO add your handling code here:
        String customer_contact = mobileNumberField.getText().trim();
        if(Pattern.compile("^\\d{10}$").matcher(customer_contact).matches() && !customer_contact.equals(""))
        {
            ImageIcon icon = new ImageIcon("target/classes/images/accept.png");
            Image img = icon.getImage();
            Image imgScale = img.getScaledInstance(mL.getWidth(), mL.getHeight(), Image.SCALE_SMOOTH);
            ImageIcon scaledIcon = new ImageIcon(imgScale);
            mL.setIcon(scaledIcon);
        }
        else
        {

            ImageIcon icon = new ImageIcon("target/classes/images/cross.png");
            mL.setIcon(icon);
        }
    }//GEN-LAST:event_mobileNumberFieldKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BookEventTickets.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BookEventTickets.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BookEventTickets.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BookEventTickets.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BookEventTickets().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bookTicketButton;
    private javax.swing.JTable bookingHistoryTable;
    private com.toedter.calendar.JDateChooser calendar;
    private javax.swing.JButton cancelBookingButton;
    private javax.swing.JComboBox<String> cityComboBox;
    private javax.swing.JButton clearButton;
    private javax.swing.JTextField customerNameField;
    private javax.swing.JTextField eventIdField;
    private javax.swing.JComboBox<String> eventsComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel mL;
    private javax.swing.JTextField mobileNumberField;
    private javax.swing.JLabel nL;
    private javax.swing.JTextField priceField;
    private javax.swing.JComboBox<String> seatComboBox;
    private javax.swing.JButton showHistoryButton;
    // End of variables declaration//GEN-END:variables

   
}
