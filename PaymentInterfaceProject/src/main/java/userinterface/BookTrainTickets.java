/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package userinterface;
import business.Mail;
import business.mysql.MySql;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import java.util.Date;
import java.util.regex.Pattern;
import javax.swing.table.DefaultTableModel;
import static userinterface.UserHomePage.balanceLabel;
import static userinterface.UserHomePage.userNameLabel;

/**
 *
 * @author devsh
 */
public class BookTrainTickets extends javax.swing.JFrame {

    /**
     * Creates new form BookTrainTickets
     */    
    
    public BookTrainTickets() {
        initComponents();
        try
        {
            MySql.createConn();
            ResultSet rs = MySql.selectQuery("select * from cities;");
            while(rs.next())
            {
                fromComboBox.addItem(rs.getString(2));
            }
            fromComboBox.setSelectedItem(null);
            ageGroupBox.setSelectedItem(null);            
        }
        catch(SQLException ex)
        {
          System.out.println(ex);
        }
        finally
        {
          MySql.shutDownConn();
        }
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane4 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        fromComboBox = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        toComboBox = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        ageGroupBox = new javax.swing.JComboBox<>();
        searchButton = new javax.swing.JButton();
        resetButton = new javax.swing.JButton();
        datePicker = new com.toedter.calendar.JDateChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        trainSchedule = new javax.swing.JTable();
        bookTicketButton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        showBookingsButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        bookingHistoryTable = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        bookingIdField = new javax.swing.JTextField();
        cancelBookingButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTabbedPane4.setBackground(new java.awt.Color(102, 102, 102));
        jTabbedPane4.setForeground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(51, 51, 51));
        jPanel2.setForeground(new java.awt.Color(204, 204, 204));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        fromComboBox.setBackground(new java.awt.Color(0, 0, 0));
        fromComboBox.setForeground(new java.awt.Color(204, 204, 204));
        fromComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                fromComboBoxItemStateChanged(evt);
            }
        });
        jPanel2.add(fromComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(135, 20, 120, -1));

        jLabel1.setBackground(new java.awt.Color(0, 0, 0));
        jLabel1.setForeground(new java.awt.Color(204, 204, 204));
        jLabel1.setText("From");
        jPanel2.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, 37, -1));

        jLabel2.setBackground(new java.awt.Color(0, 0, 0));
        jLabel2.setForeground(new java.awt.Color(204, 204, 204));
        jLabel2.setText("Destination");
        jPanel2.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, -1, -1));

        toComboBox.setBackground(new java.awt.Color(0, 0, 0));
        toComboBox.setForeground(new java.awt.Color(204, 204, 204));
        toComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                toComboBoxItemStateChanged(evt);
            }
        });
        jPanel2.add(toComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(134, 60, 120, -1));

        jLabel3.setBackground(new java.awt.Color(0, 0, 0));
        jLabel3.setForeground(new java.awt.Color(204, 204, 204));
        jLabel3.setText("Date of Travel");
        jPanel2.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 110, 83, -1));

        jLabel5.setBackground(new java.awt.Color(0, 0, 0));
        jLabel5.setForeground(new java.awt.Color(204, 204, 204));
        jLabel5.setText("Age Group");
        jPanel2.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 160, 70, -1));

        ageGroupBox.setBackground(new java.awt.Color(0, 0, 0));
        ageGroupBox.setForeground(new java.awt.Color(204, 204, 204));
        ageGroupBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Adult", "Minor", "Senior Citizen" }));
        ageGroupBox.setEnabled(false);
        jPanel2.add(ageGroupBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 160, -1, -1));

        searchButton.setBackground(new java.awt.Color(102, 204, 255));
        searchButton.setForeground(new java.awt.Color(255, 255, 255));
        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });
        jPanel2.add(searchButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 210, -1, -1));

        resetButton.setBackground(new java.awt.Color(102, 204, 255));
        resetButton.setForeground(new java.awt.Color(255, 255, 255));
        resetButton.setText("Reset");
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });
        jPanel2.add(resetButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 210, 65, -1));

        datePicker.setBackground(new java.awt.Color(0, 0, 0));
        datePicker.setForeground(new java.awt.Color(204, 204, 204));
        datePicker.setEnabled(false);
        datePicker.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                datePickerPropertyChange(evt);
            }
        });
        jPanel2.add(datePicker, new org.netbeans.lib.awtextra.AbsoluteConstraints(134, 100, 170, -1));
        datePicker.setMinSelectableDate(new Date(new Date().getTime() + 86400 * 1000));

        trainSchedule.setBackground(new java.awt.Color(0, 0, 0));
        trainSchedule.setForeground(new java.awt.Color(204, 204, 204));
        trainSchedule.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Train ID", "Start", "Destination", "Travel date", "Departure Time", "Arrival Time", "Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
            @Override
            public boolean isCellEditable(int row, int column) {
                //all cells false
                return false;
            }
        });
        trainSchedule.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane1.setViewportView(trainSchedule);

        jPanel2.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(313, 20, 503, 216));

        bookTicketButton.setBackground(new java.awt.Color(102, 204, 255));
        bookTicketButton.setForeground(new java.awt.Color(255, 255, 255));
        bookTicketButton.setText("Book");
        bookTicketButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookTicketButtonActionPerformed(evt);
            }
        });
        jPanel2.add(bookTicketButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 270, 490, -1));

        jTabbedPane4.addTab("Book Tickets", jPanel2);

        jPanel3.setBackground(new java.awt.Color(51, 51, 51));
        jPanel3.setForeground(new java.awt.Color(204, 204, 204));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        showBookingsButton.setBackground(new java.awt.Color(102, 204, 255));
        showBookingsButton.setForeground(new java.awt.Color(255, 255, 255));
        showBookingsButton.setText("Show my bookings");
        showBookingsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showBookingsButtonActionPerformed(evt);
            }
        });
        jPanel3.add(showBookingsButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 40, 270, -1));

        bookingHistoryTable.setBackground(new java.awt.Color(51, 51, 51));
        bookingHistoryTable.setForeground(new java.awt.Color(204, 204, 204));
        bookingHistoryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Booking ID", "Train ID", "Start", "Destination", "Booking_date", "Travel_date", "Age Group", "Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        bookingHistoryTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane3.setViewportView(bookingHistoryTable);

        jPanel3.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 100, 503, 216));

        jTabbedPane4.addTab("Check Booking", jPanel3);

        jPanel4.setBackground(new java.awt.Color(51, 51, 51));
        jPanel4.setForeground(new java.awt.Color(51, 51, 51));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel26.setBackground(new java.awt.Color(0, 0, 0));
        jLabel26.setForeground(new java.awt.Color(204, 204, 204));
        jLabel26.setText("Enter Booking ID");
        jPanel4.add(jLabel26, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 40, -1, -1));

        bookingIdField.setBackground(new java.awt.Color(0, 0, 0));
        bookingIdField.setForeground(new java.awt.Color(204, 204, 204));
        jPanel4.add(bookingIdField, new org.netbeans.lib.awtextra.AbsoluteConstraints(382, 40, 130, -1));

        cancelBookingButton.setBackground(new java.awt.Color(102, 204, 255));
        cancelBookingButton.setForeground(new java.awt.Color(255, 255, 255));
        cancelBookingButton.setText("Cancel Booking");
        cancelBookingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBookingButtonActionPerformed(evt);
            }
        });
        jPanel4.add(cancelBookingButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 90, 260, -1));

        jTabbedPane4.addTab("Cancel Booking", jPanel4);

        getContentPane().add(jTabbedPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 0, 838, 395));

        pack();
    }// </editor-fold>//GEN-END:initComponents
        
    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        // TODO add your handling code here:
        try
        {
          String fromLocation = fromComboBox.getSelectedItem().toString();
          String toLocation = toComboBox.getSelectedItem().toString();
          SimpleDateFormat date_format = new SimpleDateFormat("yyyy-MM-dd");
          String date = date_format.format(datePicker.getDate());
          String ageGroup = ageGroupBox.getSelectedItem().toString();
          MySql.createConn();
          String query = "select id from cities where city_name = " + "\'" + fromLocation + "\'" + ";";
          ResultSet rs = MySql.selectQuery(query);
          rs.next();
          int fromCityId = rs.getInt(1);
          query = "select id from cities where city_name = " + "\'" + toLocation + "\'" + ";";
          rs = MySql.selectQuery(query);
          rs.next();
          int toCityId = rs.getInt(1);
          query = "select * from trains where from_city = " + fromCityId + " and to_city = " + toCityId + " and travel_date = " + "\'" + date + "\'" + ";";
          rs = MySql.selectQuery(query);
          if(rs.isBeforeFirst())
          {
            DefaultTableModel table_model = (DefaultTableModel)trainSchedule.getModel();
            table_model.setRowCount(0);
            while(rs.next())
            {
              String trainId = String.valueOf(rs.getInt(1));
              String departureTime = String.valueOf(rs.getString(4));
              String arrivalTime = String.valueOf(rs.getString(5));
              double fare = rs.getInt(7);
              if(ageGroup.equals("Minor"))
                  fare *= 0.25;
              else if(ageGroup.equals("Senior Citizen"))
                  fare *= 0.50;  
              String table_data[]={trainId, fromLocation, toLocation, date, departureTime, arrivalTime, String.valueOf(fare)};
              table_model.addRow(table_data);
            }
          }
          else
              JOptionPane.showMessageDialog(this, "No trains available for the selected location and date.", "Alert", JOptionPane.WARNING_MESSAGE);
        }
        catch(NullPointerException np)
        {
          JOptionPane.showMessageDialog(this, "Please choose from location, to location, travel date and train.", "Alert", JOptionPane.WARNING_MESSAGE); 
        }
        catch(SQLException ex)
        {
          System.out.println(ex);
        }
    }//GEN-LAST:event_searchButtonActionPerformed

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        // TODO add your handling code here:
        fromComboBox.setSelectedItem(null);
        toComboBox.removeAllItems();
        toComboBox.setSelectedItem(null);
        datePicker.setCalendar(null);
        ageGroupBox.setSelectedItem(null);
        DefaultTableModel table_model = (DefaultTableModel)trainSchedule.getModel();
        table_model.setRowCount(0);
        datePicker.setEnabled(false);
        ageGroupBox.setEnabled(false);
    }//GEN-LAST:event_resetButtonActionPerformed

    private void fromComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_fromComboBoxItemStateChanged
        // TODO add your handling code here:
        if(evt != null && evt.getSource().toString() != null && evt.getStateChange() == java.awt.event.ItemEvent.SELECTED)
       {
         toComboBox.removeAllItems();
         for(int i = 0; i < fromComboBox.getItemCount(); i++)
         {
           if(fromComboBox.getSelectedItem().toString().equals(fromComboBox.getItemAt(i)))
               continue;           
           toComboBox.addItem(fromComboBox.getItemAt(i));
         }
        }
    }//GEN-LAST:event_fromComboBoxItemStateChanged

    private void toComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_toComboBoxItemStateChanged
        // TODO add your handling code here:
        datePicker.setEnabled(true);
    }//GEN-LAST:event_toComboBoxItemStateChanged

    private void bookTicketButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookTicketButtonActionPerformed
        // TODO add your handling code here:
        int row = trainSchedule.getSelectedRow();
        if(row > -1)
        {          
          try
          {        
            int trainId = Integer.parseInt(trainSchedule.getModel().getValueAt(row, 0).toString());
            String fromLocation = trainSchedule.getModel().getValueAt(row, 1).toString();
            String toLocation = trainSchedule.getModel().getValueAt(row, 2).toString();
            String ageGroup  = ageGroupBox.getSelectedItem().toString();
            String travelDate = trainSchedule.getModel().getValueAt(row, 3).toString();
            String departureTime = trainSchedule.getModel().getValueAt(row, 4).toString();
            String arrivalTime = trainSchedule.getModel().getValueAt(row, 5).toString();
            double fare = Double.parseDouble(trainSchedule.getModel().getValueAt(row, 6).toString());
            MySql.createConn();
            String query = "select userid, balance, email from users where username = " + "\'" + userNameLabel.getText() + "\'" + ";";
            ResultSet rs = MySql.selectQuery(query);
            rs.next();
            int user_id = rs.getInt(1);            
            double balance = rs.getDouble(2);
            String email = rs.getString(3);
            double available_balance = balance - fare;
            if(available_balance < 0)
            {
             JOptionPane.showMessageDialog(this, "The available wallet balance is less than the amount \nthat you're trying to buy.", "Alert", JOptionPane.WARNING_MESSAGE);
             return;
            }
            query = "insert into train_bookings(user_id, train_id, booking_date, travel_date, age_group, fare) values(" + user_id + "," + trainId + "," + "CURDATE()" + "," + "\'" + travelDate + "\'" + "," + "\'" + ageGroup + "\'" + "," + fare + ");";
            int res = MySql.insertUpdateQuery(query);
            if(res > 0)
            {               
               JOptionPane.showMessageDialog(this, "Ticket booked successfully.", null, JOptionPane.OK_OPTION);
               query = "update users set balance = balance - " + fare + " where username = " + "\'" + userNameLabel.getText() + "\'" + ";";
               res = MySql.insertUpdateQuery(query);
               if(res > 0)
               {
                 balanceLabel.setText("$ " + available_balance);
                 String message = "****************************\n";
                 message += "**********Train TICKET*********\n";
                 message += "*****************************\n";
                 message += "From: " + fromLocation + "\nTo: " + toLocation + "\n";
                 message += "Train Id: " + trainId + "\n";
                 message += "Age Group: " + ageGroup + "\n";
                 message += "Journey Date: " + travelDate + "\n";
                 message += "Departure time: " + departureTime + "\n";
                 message += "Arrival time: " + arrivalTime + "\n";
                 message += "Price: " + fare + "\n";                 
                 message += "**********^^^^^^^^^**********\n";
                 message += "******Thank You Come Again!!******\n";
                 Mail.sendMail(email, message);
               }               
             }
          }
          catch(SQLException ex)
          {
            System.out.println(ex);
          }
        }
        else
          JOptionPane.showMessageDialog(this, "Please choose a train before booking.", "Alert", JOptionPane.WARNING_MESSAGE); 
    }//GEN-LAST:event_bookTicketButtonActionPerformed
    public boolean clientSideValidation(JFrame frame, String bookingId)
    {
        if(Pattern.compile("^[1-9]\\d*$").matcher(bookingId).matches())
        {
          return true;
        }
        else
         JOptionPane.showMessageDialog(frame, "Booking Id is not valid.\nOnly numbers are allowed.", "Alert", JOptionPane.WARNING_MESSAGE);        
        return false;
    }
    private void cancelBookingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBookingButtonActionPerformed
        // TODO add your handling code here:
        String bookingID = bookingIdField.getText().trim();
        boolean passed = clientSideValidation(this, bookingID);
        if(passed)
        {
            try
            {
                MySql.createConn();
                String query = "select userid, balance, email from users where username = " + "\'" + userNameLabel.getText() + "\'" + ";";
                ResultSet rs = MySql.selectQuery(query);
                rs.next();
                int user_id = rs.getInt(1);
                double balance = rs.getDouble(2);
                String email = rs.getString(3);
                query = "select train_id from train_bookings where id = " + bookingID + " and user_id = " + user_id + ";";
                rs = MySql.selectQuery(query);
                if(rs.isBeforeFirst())
                {                    
                    rs.next();
                    int trainId = rs.getInt(1);
                    query = "select fare from train_bookings where train_id = " + trainId + ";";
                    rs = MySql.selectQuery(query);
                    rs.next();
                    int fare = rs.getInt(1);
                    double available_balance = balance + fare;
                    query = "delete from train_bookings where id = " + bookingID + " and travel_date > CURDATE() and user_id = " + user_id + ";";
                    int res = MySql.insertUpdateQuery(query);    
                    if(res > 0)
                    {
                        query = "update users set balance = balance + " + fare + " where username = " + "\'" + userNameLabel.getText() + "\'" + ";";
                        res = MySql.insertUpdateQuery(query);
                        if(res > 0)
                        {
                          JOptionPane.showMessageDialog(this, "Cancelled the booking successfully.", null, JOptionPane.OK_OPTION);
                          balanceLabel.setText("$ " + available_balance);
                          Mail.sendMail(email, "You have cancelled your train ticket with the Id: " + bookingID + "\nRefund has been added to your wallet balance.");
                        }                    
                    }
                    else
                    {
                        JOptionPane.showMessageDialog(this, "Booking Id is not valid.\nPlease give another Id.", "Alert", JOptionPane.WARNING_MESSAGE);
                    }
                }
                else
                 JOptionPane.showMessageDialog(this, "You don't have a train ticket with the given id.", "Alert", JOptionPane.WARNING_MESSAGE);
            }
            catch(SQLException ex)
            {
              System.out.println(ex);
            }
            finally
            {
              MySql.shutDownConn();
            }
        }        
    }//GEN-LAST:event_cancelBookingButtonActionPerformed

    private void datePickerPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_datePickerPropertyChange
        // TODO add your handling code here:
        ageGroupBox.setEnabled(true);
    }//GEN-LAST:event_datePickerPropertyChange

    private void showBookingsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showBookingsButtonActionPerformed
        // TODO add your handling code here:
        try
        {
            MySql.createConn();
            String query = "select userid from users where username = " + "\'" + userNameLabel.getText() + "\'" + ";";
            ResultSet rs = MySql.selectQuery(query);
            rs.next();
            int user_id = rs.getInt(1);
            query = "select * from train_bookings where user_id = " + user_id + ";";
            rs = MySql.selectQuery(query);
            DefaultTableModel table_model1 = (DefaultTableModel)bookingHistoryTable.getModel();
            table_model1.setRowCount(0);
            while(rs.next())
            {                
                String bookingId = rs.getString(1);
                String trainId = rs.getString(3);
                String bookingDate = rs.getString(4);
                String travelDate = rs.getString(5);
                String ageGroup =  rs.getString(6);
                String fare =  rs.getString(7);
                
                query = "select from_city, to_city from trains where id = " + trainId + ";";
                ResultSet rs1 = MySql.selectQuery(query);
                rs1.next();
                String fromCityId = rs1.getString(1);
                String toCityId = rs1.getString(2);
                query = "select city_name from cities where id = " + fromCityId + ";";
                rs1 = MySql.selectQuery(query);
                rs1.next();
                String fromCity = rs1.getString(1);
                query = "select city_name from cities where id = " + toCityId + ";";
                rs1 = MySql.selectQuery(query);
                rs1.next();
                String toCity = rs1.getString(1); 
                
                String table_data[]={bookingId, trainId, fromCity, toCity, bookingDate, travelDate, ageGroup, fare};
                table_model1.addRow(table_data);
            }
        }
        catch(SQLException ex)
        {
            System.out.println(ex);
        }
        finally
        {
            MySql.shutDownConn();
        }
    }//GEN-LAST:event_showBookingsButtonActionPerformed

    

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BookTrainTickets.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BookTrainTickets.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BookTrainTickets.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BookTrainTickets.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BookTrainTickets().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> ageGroupBox;
    private javax.swing.JButton bookTicketButton;
    private javax.swing.JTable bookingHistoryTable;
    private javax.swing.JTextField bookingIdField;
    private javax.swing.JButton cancelBookingButton;
    private com.toedter.calendar.JDateChooser datePicker;
    private javax.swing.JComboBox<String> fromComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane4;
    private javax.swing.JButton resetButton;
    private javax.swing.JButton searchButton;
    private javax.swing.JButton showBookingsButton;
    private javax.swing.JComboBox<String> toComboBox;
    private javax.swing.JTable trainSchedule;
    // End of variables declaration//GEN-END:variables
}
