/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package userinterface;

/**
 *
 * @author nbabu
 */
import business.Bank;
import business.BankAccountDirectory;
import business.BankDirectory;
import business.BankRequestDirectory;
import business.CreditCard;
import business.CreditCardDirectory;
import business.CreditCardRequestDirectory;
import business.Mail;
import business.UserCreditCardDirectory;
import business.UserDirectory;
import business.mysql.MySql;
import java.awt.Image;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.regex.Pattern;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import static userinterface.UserHomePage.balanceLabel;

public class AddMoneyToWallet extends javax.swing.JFrame {

    /**
     * Creates new form AddMoneyToWallet
     */
    public AddMoneyToWallet(String userName) {
        initComponents();
        userNameLabel.setText(userName);
        try
        {
          MySql.createConn();
          ResultSet rs = UserDirectory.getUserId(userNameLabel.getText());
          rs.next();
          int user_id = rs.getInt(1);
          rs = BankAccountDirectory.getAccountNumbers(user_id);
          while(rs.next()){
            addBankAccCombo.addItem(rs.getString(1));
            removeBankAccCombo.addItem(rs.getString(1));
          }
          CreditCardDirectory ccd = new CreditCardDirectory();
          for(CreditCard c: ccd.getCreditCardList())
            cardTypeCombo.addItem(c.getType());        
          rs = UserCreditCardDirectory.getCreditCardNumbers(user_id);
          while(rs.next()){
            addCreditCardsCombo.addItem(rs.getString(1));
            removeCreditCardCombo.addItem(rs.getString(1));
          }
        }
        catch(SQLException ex)
        {
          System.out.println(ex);
        }
        finally
        {
          MySql.shutDownConn();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        addCreditCardsCombo = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        addBankAccCombo = new javax.swing.JComboBox<>();
        jLabel12 = new javax.swing.JLabel();
        moneyField = new javax.swing.JTextField();
        addMoneyButton = new javax.swing.JButton();
        userNameLabel = new javax.swing.JLabel();
        moneyLabel = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        cardNumberField = new javax.swing.JTextField();
        cardTypeCombo = new javax.swing.JComboBox<>();
        cardHolderNameField = new javax.swing.JTextField();
        cEMonthCombo = new javax.swing.JComboBox<>();
        cEYearCombo = new javax.swing.JComboBox<>();
        addCardButton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        cvcField = new javax.swing.JTextField();
        cNLabel = new javax.swing.JLabel();
        cHLabel = new javax.swing.JLabel();
        cvcLabel = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        bankNameCombo = new javax.swing.JComboBox<>();
        accNumField = new javax.swing.JTextField();
        routingNumField = new javax.swing.JTextField();
        accHolderNameField = new javax.swing.JTextField();
        addAccountButton = new javax.swing.JButton();
        accNumberLabel = new javax.swing.JLabel();
        accHolderLabel = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        removeBankAccCombo = new javax.swing.JComboBox<>();
        removeBankAccButton = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        removeCreditCardCombo = new javax.swing.JComboBox<>();
        removeCardButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        setSize(new java.awt.Dimension(1000, 1000));

        jTabbedPane1.setBackground(new java.awt.Color(116, 185, 255));
        jTabbedPane1.setForeground(new java.awt.Color(255, 255, 255));
        jTabbedPane1.setTabPlacement(javax.swing.JTabbedPane.LEFT);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel10.setText("Saved Cards:");
        jPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 90, -1, -1));

        addCreditCardsCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                addCreditCardsComboItemStateChanged(evt);
            }
        });
        jPanel1.add(addCreditCardsCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(264, 88, 170, -1));

        jLabel11.setText("Added Bank Accounts:");
        jPanel1.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 140, -1, 20));

        addBankAccCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                addBankAccComboItemStateChanged(evt);
            }
        });
        jPanel1.add(addBankAccCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 140, 170, -1));

        jLabel12.setText("Money:");
        jPanel1.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 200, 130, -1));

        moneyField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                moneyFieldKeyReleased(evt);
            }
        });
        jPanel1.add(moneyField, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 200, 170, -1));

        addMoneyButton.setText("Add Money");
        addMoneyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addMoneyButtonActionPerformed(evt);
            }
        });
        jPanel1.add(addMoneyButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 260, 320, -1));
        jPanel1.add(userNameLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 0, 100, 20));
        jPanel1.add(moneyLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 200, 20, 20));

        jTabbedPane1.addTab("Add Money", jPanel1);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel6.setText("Card number:");
        jPanel2.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 150, -1, -1));

        jLabel7.setText("Card type:");
        jPanel2.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 110, 80, -1));

        jLabel8.setText("Card holder name:");
        jPanel2.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 200, 110, -1));

        jLabel9.setText("Card Expiry:");
        jPanel2.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 250, 110, -1));

        cardNumberField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                cardNumberFieldKeyReleased(evt);
            }
        });
        jPanel2.add(cardNumberField, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 150, 150, -1));

        jPanel2.add(cardTypeCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 110, 150, -1));

        cardHolderNameField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                cardHolderNameFieldKeyReleased(evt);
            }
        });
        jPanel2.add(cardHolderNameField, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 200, 150, -1));

        cEMonthCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12" }));
        jPanel2.add(cEMonthCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 250, -1, -1));

        cEYearCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2023", "2024", "2025", "2026", "2027", "2028", "2029", "2030" }));
        jPanel2.add(cEYearCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 250, -1, -1));

        addCardButton.setText("Add Card");
        addCardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCardButtonActionPerformed(evt);
            }
        });
        jPanel2.add(addCardButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 340, 290, -1));

        jLabel5.setText("CVC:");
        jPanel2.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 300, 110, -1));

        cvcField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                cvcFieldKeyReleased(evt);
            }
        });
        jPanel2.add(cvcField, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 300, 150, -1));
        jPanel2.add(cNLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 150, 20, 20));
        jPanel2.add(cHLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 200, 20, 20));
        jPanel2.add(cvcLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 300, 20, 20));

        jTabbedPane1.addTab("Add Credit card", jPanel2);

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("Bank:");
        jPanel3.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 130, -1, -1));

        jLabel2.setText("Account number:");
        jPanel3.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 170, -1, -1));

        jLabel3.setText("Routing number:");
        jPanel3.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 210, -1, -1));

        jLabel4.setText("Account holder name:");
        jPanel3.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 250, -1, -1));

        bankNameCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                bankNameComboItemStateChanged(evt);
            }
        });
        jPanel3.add(bankNameCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 130, 110, -1));
        try
        {
            MySql.createConn();
            ResultSet rs = MySql.selectQuery("select name from banks;");
            while(rs.next())
            {
                bankNameCombo.addItem(rs.getString(1));
            }
        }
        catch(SQLException ex)
        {
            System.out.println(ex);
        }
        finally
        {
            MySql.shutDownConn();
        }

        accNumField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                accNumFieldKeyReleased(evt);
            }
        });
        jPanel3.add(accNumField, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 170, 110, -1));

        routingNumField.setEnabled(false);
        jPanel3.add(routingNumField, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 210, 110, -1));

        accHolderNameField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                accHolderNameFieldKeyReleased(evt);
            }
        });
        jPanel3.add(accHolderNameField, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 250, 110, -1));

        addAccountButton.setText("Add Account");
        addAccountButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addAccountButtonActionPerformed(evt);
            }
        });
        jPanel3.add(addAccountButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 310, 260, -1));
        jPanel3.add(accNumberLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 170, 20, 20));
        jPanel3.add(accHolderLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 250, 20, 20));

        jTabbedPane1.addTab("Add Bank Account", jPanel3);

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel13.setText("Bank Acc:");
        jPanel4.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(143, 109, -1, -1));

        jPanel4.add(removeBankAccCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 110, 180, -1));

        removeBankAccButton.setText("Remove");
        removeBankAccButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeBankAccButtonActionPerformed(evt);
            }
        });
        jPanel4.add(removeBankAccButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 160, 260, -1));

        jLabel14.setText("Card:");
        jPanel4.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 240, -1, -1));

        jPanel4.add(removeCreditCardCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 240, 180, -1));

        removeCardButton.setText("Remove");
        removeCardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeCardButtonActionPerformed(evt);
            }
        });
        jPanel4.add(removeCardButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 290, 260, -1));

        jTabbedPane1.addTab("Remove", jPanel4);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 700, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 600, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bankNameComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_bankNameComboItemStateChanged
        // TODO add your handling code here:
        if(evt != null && evt.getSource().toString() != null && evt.getStateChange() == java.awt.event.ItemEvent.SELECTED){
            String bankName = bankNameCombo.getSelectedItem().toString();
            BankDirectory bd = new BankDirectory();
            for(Bank bank: bd.getBankList())
            {
              if(bank.getName().equals(bankName))
              {
                routingNumField.setText(bank.getRoutingNumber());
                break;            
              }
            }
      }
    }//GEN-LAST:event_bankNameComboItemStateChanged
    public boolean clientSideValidation(JFrame frame, String accNumber, String accHoldername)
    {
      if(Pattern.compile("^[a-zA-Z\\s]*$").matcher(accHoldername).matches() && !accHoldername.equals(""))
         {
           if(Pattern.compile("^\\d{10,12}$").matcher(accNumber).matches())
           {
             return true;
           }
           else
            JOptionPane.showMessageDialog(frame, "Account number is not valid.\nOnly numbers are allowed.", "Alert", JOptionPane.WARNING_MESSAGE);      
         }
         else
            JOptionPane.showMessageDialog(frame, "Account holder name is not valid.\nOnly characters and spaces are allowed.", "Alert", JOptionPane.WARNING_MESSAGE);  
      return false;
    }
    private void addAccountButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addAccountButtonActionPerformed
        // TODO add your handling code here:
        String bankName = bankNameCombo.getSelectedItem().toString();
        String accNumber = accNumField.getText().trim();
        String accHolderName = accHolderNameField.getText().trim();
        boolean passed = clientSideValidation(this, accNumber, accHolderName);
        if(passed)
        {
          try
          {
            MySql.createConn();
            ResultSet rs = BankAccountDirectory.accountNumberExists(accNumber);
            rs.next();
            if(rs.getInt(1) == 0)
            {
                rs = UserDirectory.getUserIdNameEmail();
                int userId = 0;
                String email = "";
                while(rs.next())
                {
                  if(rs.getString(2).equals(userNameLabel.getText()))
                  {
                    userId = rs.getInt(1);
                    email = rs.getString(3);
                    break;
                  }
                }
                rs = BankDirectory.getBanks();
                int bankId = 0;
                while(rs.next())
                {
                  if(rs.getString(2).equals(bankName))
                  {
                    bankId = rs.getInt(1);
                    break;
                  }
                }
                String code = "";
                for(int i = 0; i < 6; i++)
                    code += (int)(Math.random() * 6);
                Mail mail = new Mail(email, code);
                mail.sendMail();
                while(true)
                {
                    String userCode = JOptionPane.showInputDialog(this,"Please enter the code that is sent to your Email Id."); 
                    if(userCode.equals(code))
                    {
                      int res = BankRequestDirectory.addBankRequest(userId, bankId, accHolderName, accNumber);
                      if(res > 0)
                      {
                        JOptionPane.showMessageDialog(this, "Request to add the bank account is sent to the admin.\n Account will be added once the request is approved.", null, JOptionPane.OK_OPTION);
                        break;
                      }
                    }
                    else
                    {
                      JOptionPane.showMessageDialog(this, "The code entered is incorrect, please enter the correct code.", "Alert", JOptionPane.WARNING_MESSAGE);
                    }               
                }
            }
            else
               JOptionPane.showMessageDialog(this, "The account that you're trying to add was already added.", "Alert", JOptionPane.WARNING_MESSAGE);
          }
          catch(SQLException ex)
          {
            System.out.println(ex);
          }
          finally
          {
            MySql.shutDownConn();
          }
        }
    }//GEN-LAST:event_addAccountButtonActionPerformed

    private void accNumFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_accNumFieldKeyReleased
        // TODO add your handling code here:
        String accNum = accNumField.getText().trim();
        if(Pattern.compile("^\\d{10,12}$").matcher(accNum).matches() && !accNum.equals(""))
        {
          ImageIcon icon = new ImageIcon("target/classes/images/accept.png");
          Image img = icon.getImage();                
          Image imgScale = img.getScaledInstance(accNumberLabel.getWidth(), accNumberLabel.getHeight(), Image.SCALE_SMOOTH);
          ImageIcon scaledIcon = new ImageIcon(imgScale);  
          accNumberLabel.setIcon(scaledIcon);
        }
        else
        {
          
          ImageIcon icon = new ImageIcon("target/classes/images/cross.png");
          accNumberLabel.setIcon(icon);
        }
    }//GEN-LAST:event_accNumFieldKeyReleased

    private void accHolderNameFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_accHolderNameFieldKeyReleased
        // TODO add your handling code here:
        String accHolder = accHolderNameField.getText().trim();
        if(Pattern.compile("^[a-zA-Z\\s]*$").matcher(accHolder).matches() && !accHolder.equals(""))
        {
          ImageIcon icon = new ImageIcon("target/classes/images/accept.png");
          Image img = icon.getImage();                
          Image imgScale = img.getScaledInstance(accHolderLabel.getWidth(), accHolderLabel.getHeight(), Image.SCALE_SMOOTH);
          ImageIcon scaledIcon = new ImageIcon(imgScale);  
          accHolderLabel.setIcon(scaledIcon);
        }
        else
        {
          
          ImageIcon icon = new ImageIcon("target/classes/images/cross.png");
          accHolderLabel.setIcon(icon);
        }
    }//GEN-LAST:event_accHolderNameFieldKeyReleased
    public boolean clientSideValidation(JFrame frame, String cardNumber, String cardHolderName, String cvcNumber)
    {
      if(Pattern.compile("^[a-zA-Z\\s]*$").matcher(cardHolderName).matches() && !cardHolderName.equals(""))
         {
           if(Pattern.compile("^\\d{16}$").matcher(cardNumber).matches())
           {
             if(Pattern.compile("^\\d{3}$").matcher(cvcNumber).matches())
             {
               return true;
             }
             else
               JOptionPane.showMessageDialog(frame, "Card CVC is not valid.\nPlease enter 3 digit CVC code.", "Alert", JOptionPane.WARNING_MESSAGE);   
           }
           else
            JOptionPane.showMessageDialog(frame, "Card number is not valid.\nOnly numbers are allowed.", "Alert", JOptionPane.WARNING_MESSAGE);      
         }
         else
            JOptionPane.showMessageDialog(frame, "Card holder name is not valid.\nOnly characters and spaces are allowed.", "Alert", JOptionPane.WARNING_MESSAGE); 
      return false;
    }
    private void addCardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCardButtonActionPerformed
        // TODO add your handling code here:
        String cardType = cardTypeCombo.getSelectedItem().toString();
        String cardNumber = cardNumberField.getText().trim();
        String cardHolderName = cardHolderNameField.getText().trim();
        String cardExpiryMonth = cEMonthCombo.getSelectedItem().toString();
        String cardExpiryYear = cEYearCombo.getSelectedItem().toString();
        String cardExpiry = cardExpiryMonth + "/" + cardExpiryYear;
        String cvcNumber = cvcField.getText().trim();
        boolean passed = clientSideValidation(this, cardNumber, cardHolderName, cvcNumber);
        if(passed)
        {
          try
          {            
            MySql.createConn();
            ResultSet rs = UserCreditCardDirectory.creditCardExists(cardNumber);
            rs.next();
            if(rs.getInt(1) == 0)
            {
                rs = UserDirectory.getUserIdNameEmail();
                int userId = 0;
                String email = "";
                while(rs.next())
                {
                  if(rs.getString(2).equals(userNameLabel.getText()))
                  {
                    userId = rs.getInt(1);
                    email = rs.getString(3);
                    break;
                  }
                }
                rs = CreditCardDirectory.getCreditCards();
                int cardId = 0;
                while(rs.next())
                {
                  if(rs.getString(2).equals(cardType))
                  {
                    cardId = rs.getInt(1);
                    break;
                  }
                }
                String code = "";
                for(int i = 0; i < 6; i++)
                    code += (int)(Math.random() * 6);
                Mail mail = new Mail(email, code);
                mail.sendMail();
                while(true)
                {
                    String userCode = JOptionPane.showInputDialog(this,"Please enter the code that is sent to your Email Id."); 
                    if(userCode.equals(code))
                    {      
                      int res = CreditCardRequestDirectory.addCardRequest(userId, cardId, cardHolderName, cardNumber, cardExpiry, cvcNumber);
                      if(res > 0)
                      {
                        JOptionPane.showMessageDialog(this, "Request to add the credit card is sent to the admin.\n Credit card will be added once the request is approved.", null, JOptionPane.OK_OPTION);
                        break;
                      }
                    }
                    else
                    {
                      JOptionPane.showMessageDialog(this, "The code entered is incorrect, please enter the correct code.", "Alert", JOptionPane.WARNING_MESSAGE);
                    }               
                } 
            }
            else
              JOptionPane.showMessageDialog(this, "The card that you're trying to add was already added.", "Alert", JOptionPane.WARNING_MESSAGE);
          }
          catch(SQLException ex)
          {
            System.out.println(ex);
          }
          finally
          {
            MySql.shutDownConn();
          }
        }
    }//GEN-LAST:event_addCardButtonActionPerformed

    private void cardNumberFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cardNumberFieldKeyReleased
        // TODO add your handling code here:
        String cardNumber = cardNumberField.getText().trim();
        if(Pattern.compile("^\\d{16}$").matcher(cardNumber).matches() && !cardNumber.equals(""))
        {
          ImageIcon icon = new ImageIcon("target/classes/images/accept.png");
          Image img = icon.getImage();                
          Image imgScale = img.getScaledInstance(cNLabel.getWidth(), cNLabel.getHeight(), Image.SCALE_SMOOTH);
          ImageIcon scaledIcon = new ImageIcon(imgScale);  
          cNLabel.setIcon(scaledIcon);
        }
        else
        {
          
          ImageIcon icon = new ImageIcon("target/classes/images/cross.png");
          cNLabel.setIcon(icon);
        }
    }//GEN-LAST:event_cardNumberFieldKeyReleased

    private void cardHolderNameFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cardHolderNameFieldKeyReleased
        // TODO add your handling code here:
        String cardHolderName = cardHolderNameField.getText().trim();
        if(Pattern.compile("^[a-zA-Z\\s]*$").matcher(cardHolderName).matches() && !cardHolderName.equals(""))
        {
          ImageIcon icon = new ImageIcon("target/classes/images/accept.png");
          Image img = icon.getImage();                
          Image imgScale = img.getScaledInstance(cHLabel.getWidth(), cHLabel.getHeight(), Image.SCALE_SMOOTH);
          ImageIcon scaledIcon = new ImageIcon(imgScale);  
          cHLabel.setIcon(scaledIcon);
        }
        else
        {
          
          ImageIcon icon = new ImageIcon("target/classes/images/cross.png");
          cHLabel.setIcon(icon);
        }
    }//GEN-LAST:event_cardHolderNameFieldKeyReleased

    private void cvcFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cvcFieldKeyReleased
        // TODO add your handling code here:
        String cvcNumber = cvcField.getText().trim();
        if(Pattern.compile("^\\d{3}$").matcher(cvcNumber).matches() && !cvcNumber.equals(""))
        {
          ImageIcon icon = new ImageIcon("target/classes/images/accept.png");
          Image img = icon.getImage();                
          Image imgScale = img.getScaledInstance(cvcLabel.getWidth(), cvcLabel.getHeight(), Image.SCALE_SMOOTH);
          ImageIcon scaledIcon = new ImageIcon(imgScale);  
          cvcLabel.setIcon(scaledIcon);
        }
        else
        {
          
          ImageIcon icon = new ImageIcon("target/classes/images/cross.png");
          cvcLabel.setIcon(icon);
        }
    }//GEN-LAST:event_cvcFieldKeyReleased

    private void addCreditCardsComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_addCreditCardsComboItemStateChanged
        // TODO add your handling code here:
      if(evt != null && evt.getSource().toString() != null && evt.getStateChange() == java.awt.event.ItemEvent.SELECTED)
      {
        addBankAccCombo.setSelectedItem(null);
      }
    }//GEN-LAST:event_addCreditCardsComboItemStateChanged

    private void addBankAccComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_addBankAccComboItemStateChanged
        // TODO add your handling code here:
      if(evt != null && evt.getSource().toString() != null && evt.getStateChange() == java.awt.event.ItemEvent.SELECTED)
      {
          addCreditCardsCombo.setSelectedItem(null);
      }
    }//GEN-LAST:event_addBankAccComboItemStateChanged
    public boolean clientSideValidation(String money)
    {
      if(Pattern.compile("^[0-9.]+$").matcher(money).matches() && !money.equals(""))
      {
        return true;
      }
      else
      {
        JOptionPane.showMessageDialog(this, "Please enter the amount in positive numbers.", "Alert", JOptionPane.WARNING_MESSAGE);
      }
      return false;
    }
    private void addMoneyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addMoneyButtonActionPerformed
        // TODO add your handling code here:
        try
        {
           boolean passed = clientSideValidation(moneyField.getText().trim());
           if(passed)
           {
           double money = Double.parseDouble(moneyField.getText().trim());
           MySql.createConn();
           ResultSet rs = UserDirectory.getUserId(userNameLabel.getText());
           rs.next();
           int user_id = rs.getInt(1);
           if(addCreditCardsCombo.getSelectedItem() != null)
           {
             rs = UserCreditCardDirectory.availableCredit(user_id, addCreditCardsCombo.getSelectedItem().toString());
             rs.next();
             double available_credit = rs.getDouble(1) - money;
             if(available_credit < 0)
             {
               JOptionPane.showMessageDialog(this, "The available credit is less than the money that you're trying to add.", "Alert", JOptionPane.WARNING_MESSAGE);
               return;
             }
             int res = UserCreditCardDirectory.updateAvailableCredit(available_credit, user_id, addCreditCardsCombo.getSelectedItem().toString());
             if(res > 0)
             {
               res = UserDirectory.addMoney(money, userNameLabel.getText());
               if(res > 0)
               {
                double updatedBalance = Double.parseDouble(balanceLabel.getText().replace("$", "").trim()) + money;
                balanceLabel.setText("$ " + updatedBalance);
                JOptionPane.showMessageDialog(this, "Money added successfully, wallet balance updated.", null, JOptionPane.OK_OPTION);
               }
             }             
           }
           else if(addBankAccCombo.getSelectedItem() != null)
           {
             rs = BankAccountDirectory.availableBalance(user_id, addBankAccCombo.getSelectedItem().toString());
             rs.next();
             double available_bal = rs.getDouble(1) - money;
             if(available_bal < 0)
             {
               JOptionPane.showMessageDialog(this, "The available balance is less than the money that you're trying to add.", "Alert", JOptionPane.WARNING_MESSAGE);
               return;
             }
             int res = BankAccountDirectory.updateAvailableBalance(available_bal, user_id, addBankAccCombo.getSelectedItem().toString());
             if(res > 0)
             {
               res = UserDirectory.addMoney(money, userNameLabel.getText());
               if(res > 0)
               {
                double updatedBalance = Double.parseDouble(balanceLabel.getText().replace("$", "").trim()) + money;
                balanceLabel.setText("$ " + updatedBalance);
                JOptionPane.showMessageDialog(this, "Money added successfully, wallet balance updated.", null, JOptionPane.OK_OPTION);
               }
             }
           }
           else
            JOptionPane.showMessageDialog(this, "Please choose at least one source.", "Alert", JOptionPane.WARNING_MESSAGE);
        }
        }
        catch(SQLException ex)
        {
          System.out.println(ex);
        }
        catch(NumberFormatException ne)
        {
          JOptionPane.showMessageDialog(this, "Please enter the amount in positive numbers.", "Alert", JOptionPane.WARNING_MESSAGE);
        }
        finally
        {
          MySql.shutDownConn();
        }
    }//GEN-LAST:event_addMoneyButtonActionPerformed

    private void moneyFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_moneyFieldKeyReleased
        // TODO add your handling code here:
        String money = moneyField.getText().trim();
        if(Pattern.compile("^[0-9.]+$").matcher(money).matches() && !money.equals(""))
        {
          ImageIcon icon = new ImageIcon("target/classes/images/accept.png");
          Image img = icon.getImage();                
          Image imgScale = img.getScaledInstance(moneyLabel.getWidth(), moneyLabel.getHeight(), Image.SCALE_SMOOTH);
          ImageIcon scaledIcon = new ImageIcon(imgScale);  
          moneyLabel.setIcon(scaledIcon);
        }
        else
        {
          
          ImageIcon icon = new ImageIcon("target/classes/images/cross.png");
          moneyLabel.setIcon(icon);
        }
    }//GEN-LAST:event_moneyFieldKeyReleased

    private void removeBankAccButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeBankAccButtonActionPerformed
        // TODO add your handling code here:
        try
        {
          if(removeBankAccCombo.getSelectedItem() != null)
          {
            String removeBankAcc = removeBankAccCombo.getSelectedItem().toString();
            MySql.createConn();
            int res = BankAccountDirectory.deleteBankAccount(removeBankAcc);
            if(res > 0)
            {
             JOptionPane.showMessageDialog(this, "Removed the bank account successfully.", null, JOptionPane.OK_OPTION);
             removeBankAccCombo.removeItem(removeBankAcc);
             addBankAccCombo.removeItem(removeBankAcc);
            }
          }
          else
            JOptionPane.showMessageDialog(this, "Bank Account number is not valid.", "Alert", JOptionPane.WARNING_MESSAGE);
        }        
        catch(Exception ex)            
        {
          System.out.println(ex);
        }
        finally
        {
          MySql.shutDownConn();
        }
    }//GEN-LAST:event_removeBankAccButtonActionPerformed

    private void removeCardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeCardButtonActionPerformed
        // TODO add your handling code here:
        try
        {
          if(removeCreditCardCombo.getSelectedItem() != null)
          {
            String removeCreditCard = removeCreditCardCombo.getSelectedItem().toString();          
            MySql.createConn();
            int res = UserCreditCardDirectory.deleteCreditCard(removeCreditCard);
            if(res > 0)
            {
             JOptionPane.showMessageDialog(this, "Removed the credit card successfully.", null, JOptionPane.OK_OPTION);
             removeCreditCardCombo.removeItem(removeCreditCard);
             addCreditCardsCombo.removeItem(removeCreditCard);
            }
          }
          else
            JOptionPane.showMessageDialog(this, "Credit card number is not valid.", "Alert", JOptionPane.WARNING_MESSAGE);
        }        
        catch(Exception ex)           
        {
          System.out.println(ex);
        }
        finally
        {
          MySql.shutDownConn();
        }
    }//GEN-LAST:event_removeCardButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddMoneyToWallet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddMoneyToWallet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddMoneyToWallet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddMoneyToWallet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AddMoneyToWallet("").setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel accHolderLabel;
    private javax.swing.JTextField accHolderNameField;
    private javax.swing.JTextField accNumField;
    private javax.swing.JLabel accNumberLabel;
    private javax.swing.JButton addAccountButton;
    private javax.swing.JComboBox<String> addBankAccCombo;
    private javax.swing.JButton addCardButton;
    private javax.swing.JComboBox<String> addCreditCardsCombo;
    private javax.swing.JButton addMoneyButton;
    private javax.swing.JComboBox<String> bankNameCombo;
    private javax.swing.JComboBox<String> cEMonthCombo;
    private javax.swing.JComboBox<String> cEYearCombo;
    private javax.swing.JLabel cHLabel;
    private javax.swing.JLabel cNLabel;
    private javax.swing.JTextField cardHolderNameField;
    private javax.swing.JTextField cardNumberField;
    private javax.swing.JComboBox<String> cardTypeCombo;
    private javax.swing.JTextField cvcField;
    private javax.swing.JLabel cvcLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField moneyField;
    private javax.swing.JLabel moneyLabel;
    private javax.swing.JButton removeBankAccButton;
    private javax.swing.JComboBox<String> removeBankAccCombo;
    private javax.swing.JButton removeCardButton;
    private javax.swing.JComboBox<String> removeCreditCardCombo;
    private javax.swing.JTextField routingNumField;
    private javax.swing.JLabel userNameLabel;
    // End of variables declaration//GEN-END:variables
}
