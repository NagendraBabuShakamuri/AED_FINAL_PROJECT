/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package userinterface;

import business.Mail;
import business.mysql.MySql;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.Date;
import java.util.regex.Pattern;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import static userinterface.UserHomePage.balanceLabel;
import static userinterface.UserHomePage.userNameLabel;

/**
 *
 * @author devsh
 */
public class MobilePayment extends javax.swing.JFrame {

    /**
     * Creates new form MobilePayment
     */
    public MobilePayment() {
        initComponents();
        try
        {
          MySql.createConn();          
          String query = "select provider_name from mob_service_providers;";
          ResultSet rs = MySql.selectQuery(query);
          while(rs.next())
          {
            rechargeProviderCombo.addItem(rs.getString(1));
          }
        }
        catch(SQLException ex)
        {
            System.out.println(ex);
        }
        finally
        {
          MySql.shutDownConn();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        rechargeMobNumberField = new javax.swing.JTextField();
        rechargeNumberButton = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        rechargeProviderCombo = new javax.swing.JComboBox<>();
        checkPlansButton = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        mobilePlansTable = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        providerIdField = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        checkMobNumber = new javax.swing.JTextField();
        providerField = new javax.swing.JTextField();
        jScrollPane6 = new javax.swing.JScrollPane();
        checkMobPlansTable = new javax.swing.JTable();
        checkActivePlanButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jTabbedPane1.setBackground(new java.awt.Color(102, 102, 102));
        jTabbedPane1.setForeground(new java.awt.Color(255, 255, 255));

        jPanel1.setBackground(new java.awt.Color(51, 51, 51));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel3.setBackground(new java.awt.Color(0, 0, 0));
        jLabel3.setForeground(new java.awt.Color(204, 204, 204));
        jLabel3.setText("Phone Number");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 60, -1, -1));

        rechargeMobNumberField.setBackground(new java.awt.Color(0, 0, 0));
        rechargeMobNumberField.setForeground(new java.awt.Color(204, 204, 204));
        jPanel1.add(rechargeMobNumberField, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 60, 140, -1));

        rechargeNumberButton.setBackground(new java.awt.Color(102, 204, 255));
        rechargeNumberButton.setForeground(new java.awt.Color(255, 255, 255));
        rechargeNumberButton.setText("Recharge");
        rechargeNumberButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rechargeNumberButtonActionPerformed(evt);
            }
        });
        jPanel1.add(rechargeNumberButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 470, 140, -1));

        jLabel10.setBackground(new java.awt.Color(0, 0, 0));
        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(204, 204, 204));
        jLabel10.setText("Recharge");
        jPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 20, -1, -1));

        jLabel12.setBackground(new java.awt.Color(0, 0, 0));
        jLabel12.setForeground(new java.awt.Color(204, 204, 204));
        jLabel12.setText("Service provider");
        jPanel1.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 100, -1, -1));

        rechargeProviderCombo.setBackground(new java.awt.Color(0, 0, 0));
        rechargeProviderCombo.setForeground(new java.awt.Color(204, 204, 204));
        jPanel1.add(rechargeProviderCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 100, 140, -1));

        checkPlansButton.setBackground(new java.awt.Color(102, 204, 255));
        checkPlansButton.setForeground(new java.awt.Color(255, 255, 255));
        checkPlansButton.setText("Check Plans");
        checkPlansButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkPlansButtonActionPerformed(evt);
            }
        });
        jPanel1.add(checkPlansButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 180, 113, -1));

        mobilePlansTable.setBackground(new java.awt.Color(0, 0, 0));
        mobilePlansTable.setForeground(new java.awt.Color(204, 204, 204));
        mobilePlansTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Plan Id", "Plan Name", "Data", "Calls", "Validity", "Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
            @Override
            public boolean isCellEditable(int row, int column) {
                //all cells false
                return false;
            }
        });
        jScrollPane4.setViewportView(mobilePlansTable);

        jPanel1.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 220, 490, 228));

        jLabel8.setBackground(new java.awt.Color(0, 0, 0));
        jLabel8.setForeground(new java.awt.Color(204, 204, 204));
        jLabel8.setText("Provider id:");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 140, 90, -1));

        providerIdField.setBackground(new java.awt.Color(0, 0, 0));
        providerIdField.setForeground(new java.awt.Color(204, 204, 204));
        providerIdField.setEnabled(false);
        jPanel1.add(providerIdField, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 140, 140, -1));

        jTabbedPane1.addTab("Mobile Recharge", jPanel1);

        jPanel3.setBackground(new java.awt.Color(51, 51, 51));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setBackground(new java.awt.Color(0, 0, 0));
        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(204, 204, 204));
        jLabel2.setText("Check Active Plan");
        jPanel3.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 10, -1, -1));

        jLabel6.setBackground(new java.awt.Color(0, 0, 0));
        jLabel6.setForeground(new java.awt.Color(204, 204, 204));
        jLabel6.setText("Phone Number");
        jPanel3.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 60, -1, -1));

        jLabel7.setBackground(new java.awt.Color(0, 0, 0));
        jLabel7.setForeground(new java.awt.Color(204, 204, 204));
        jLabel7.setText("Service provider");
        jPanel3.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 100, -1, -1));

        checkMobNumber.setBackground(new java.awt.Color(0, 0, 0));
        checkMobNumber.setForeground(new java.awt.Color(204, 204, 204));
        jPanel3.add(checkMobNumber, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 60, 130, -1));

        providerField.setBackground(new java.awt.Color(0, 0, 0));
        providerField.setForeground(new java.awt.Color(204, 204, 204));
        providerField.setEnabled(false);
        jPanel3.add(providerField, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 100, 130, -1));

        checkMobPlansTable.setBackground(new java.awt.Color(0, 0, 0));
        checkMobPlansTable.setForeground(new java.awt.Color(204, 204, 204));
        checkMobPlansTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Plan Name", "Data", "Calls", "Validity", "Price", "Plan Start date", "Recharge Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
            @Override
            public boolean isCellEditable(int row, int column) {
                //all cells false
                return false;
            }
        });
        jScrollPane6.setViewportView(checkMobPlansTable);

        jPanel3.add(jScrollPane6, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 180, 650, 228));

        checkActivePlanButton.setBackground(new java.awt.Color(102, 204, 255));
        checkActivePlanButton.setForeground(new java.awt.Color(255, 255, 255));
        checkActivePlanButton.setText("Check Active Plan");
        checkActivePlanButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkActivePlanButtonActionPerformed(evt);
            }
        });
        jPanel3.add(checkActivePlanButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 430, 140, -1));

        jTabbedPane1.addTab("Active Plans", jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 925, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 550, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void checkPlansButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkPlansButtonActionPerformed
        // TODO add your handling code here:
        String mobNumber = rechargeMobNumberField.getText().trim();
        String serviceProvider = rechargeProviderCombo.getSelectedItem().toString();
        boolean passed = clientSideValidation(this, mobNumber);
        if(passed)
        {
            try
            {
                MySql.createConn();
                String query = "select id from mob_service_providers where provider_name = " + "\'" + serviceProvider + "\'" + ";";
                ResultSet rs = MySql.selectQuery(query);
                rs.next();
                int providerId = rs.getInt(1);
                providerIdField.setText(Integer.valueOf(providerId).toString());
                query = "select id, plan_name, data, calls, validity, price from mobile_plans where provider_id = " + providerId + ";";
                rs = MySql.selectQuery(query);
                DefaultTableModel table_model = (DefaultTableModel)mobilePlansTable.getModel();
                table_model.setRowCount(0);
                while(rs.next())
                {
                    String planId = rs.getString(1);
                    String planName = rs.getString(2);
                    String data = rs.getString(3);
                    String calls = rs.getString(4);
                    String validity = rs.getString(5) + " MONTH";
                    String price = "$ " + rs.getString(6);
                    table_model.addRow(new String[]{planId, planName, data, calls, validity, price});
                }
            }
            catch(SQLException ex)
            {
                System.out.println(ex);
            }
            finally
            {
                MySql.shutDownConn();
            }
        }
    }//GEN-LAST:event_checkPlansButtonActionPerformed

    private void rechargeNumberButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rechargeNumberButtonActionPerformed
        // TODO add your handling code here:
        int row = mobilePlansTable.getSelectedRow();
        if(row > -1)
        {
            String mobNumber = rechargeMobNumberField.getText().trim();
            String serviceProvider = rechargeProviderCombo.getSelectedItem().toString();
            boolean passed = clientSideValidation(this, mobNumber);   
            int selectedPlanId = Integer.parseInt(mobilePlansTable.getModel().getValueAt(row, 0).toString());      
            String selectedPlanName = mobilePlansTable.getModel().getValueAt(row, 1).toString();
            String selectedData = mobilePlansTable.getModel().getValueAt(row, 2).toString();
            String selectedCalls = mobilePlansTable.getModel().getValueAt(row, 3).toString();
            int selectedValidity = Integer.parseInt(mobilePlansTable.getModel().getValueAt(row, 4).toString().substring(0, 1));
            double selectedPrice = Double.parseDouble(mobilePlansTable.getModel().getValueAt(row, 5).toString().substring(2));
            if(passed)
            {
                try
                {
                    MySql.createConn();
                    String query = "select * from mobile_active_plans where mobile = " + "\'" + mobNumber + "\'" + " order by plan_start_date DESC limit 1;";
                    ResultSet rs = MySql.selectQuery(query);
                    String plan_start_date = null;
                    String current_date = null;
                    if(rs.isBeforeFirst())
                    {    
                        rs.next();                        
                        int planId = rs.getInt(4);                        
                        String planStartDate = rs.getString(5);
                        LocalDate currentDate = LocalDate.now();
                        current_date = currentDate.toString();
                        LocalDate planDate = LocalDate.parse(planStartDate);
                        query = "select * from mobile_plans where id = " + planId + ";";
                        rs = MySql.selectQuery(query);          
                        if(rs.isBeforeFirst())
                        {
                            rs.next();
                            LocalDate planEndDate = planDate.plusMonths(rs.getInt(6));
                            System.out.println(planDate + " " + currentDate + " " + planEndDate);
                            if(currentDate.isAfter(planEndDate))
                            {
                                plan_start_date = currentDate.toString();
                            }
                            else
                            {
                                if(!String.valueOf(rs.getString(2)).equals(providerIdField.getText()))
                                {
                                  JOptionPane.showMessageDialog(this, "You already have an active plan with another service operator.", "Alert", JOptionPane.WARNING_MESSAGE);  
                                  return;
                                }
                                plan_start_date = planEndDate.plusDays(1).toString();
                            }
                            System.out.println(plan_start_date);
                        }                        
                    }
                    else
                    {
                        current_date = LocalDate.now().toString();
                        plan_start_date = current_date;                        
                    }
                    query = "select userid, balance, email from users where username = " + "\'" + userNameLabel.getText() + "\'" + ";";
                    rs = MySql.selectQuery(query);
                    rs.next();
                    int userId = rs.getInt(1);
                    double balance = rs.getDouble(2);
                    String email = rs.getString(3);
                    double available_balance = balance - selectedPrice;
                    if(available_balance < 0)
                    {
                        JOptionPane.showMessageDialog(this, "The available wallet balance is less than the amount\nthat you're trying to pay.", "Alert", JOptionPane.WARNING_MESSAGE);
                        return;
                    }
                    query = "INSERT INTO mobile_active_plans(user_id, mobile, plan_id, plan_start_date, recharge_date) values(" + userId + "," + "\'" + mobNumber + "\'" + "," + "\'" + selectedPlanId + "\'" + "," + "\'" + plan_start_date + "\'" + "," + "\'" + current_date + "\'" + ");";
                    int res = MySql.insertUpdateQuery(query);
                    if(res > 0)
                    {
                        JOptionPane.showMessageDialog(this, "Recharged the number successfully.", null, JOptionPane.OK_OPTION);
                        query = "update users set balance = balance - " + selectedPrice + " where username = " + "\'" + userNameLabel.getText() + "\'" + ";";
                        res = MySql.insertUpdateQuery(query);
                        if(res > 0)
                        {
                            balanceLabel.setText("$ " + available_balance);
                            String message = "You have just recharged a mobile number:\n";
                            message += "Mobile: " + mobNumber;
                            message += "\nService Provider: " + serviceProvider;
                            message += "\nPlan Name: " + selectedPlanName;
                            message += "\nData: " + selectedData;
                            message += "\nCalls: " + selectedCalls;
                            message += "\nValidity: " + selectedValidity;
                            message += "\nPrice: $ " + selectedPrice;                                
                            Mail.sendMail(email, message);
                        }
                    }
                }
                catch(SQLException ex)
                {
                    System.out.println(ex);
                }
                finally
                {
                    MySql.shutDownConn();
                }
            }
        }
        else
          JOptionPane.showMessageDialog(this, "Please select a plan to recharge.", "Alert", JOptionPane.WARNING_MESSAGE);
    }//GEN-LAST:event_rechargeNumberButtonActionPerformed

    private void checkActivePlanButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkActivePlanButtonActionPerformed
        // TODO add your handling code here:
        String mobNumber = checkMobNumber.getText().trim();
        boolean passed = clientSideValidation(this, mobNumber);
        if(passed)
        {
          try
          {
            MySql.createConn();
            String query = "select * from mobile_active_plans where mobile = " + "\'" + mobNumber + "\'" + ";";
            ResultSet rs = MySql.selectQuery(query);
            DefaultTableModel table_model = (DefaultTableModel)checkMobPlansTable.getModel();
            table_model.setRowCount(0);
            if(rs.isBeforeFirst())
            {               
              while(rs.next())
              {
                int planId = rs.getInt(4);
                String query1 = "select provider_id, plan_name, data, calls, validity, price from mobile_plans where id = " + planId + ";";                
                ResultSet rs1 = MySql.selectQuery(query1);                
                rs1.next();   
                int providerId = rs1.getInt(1);
                LocalDate currentDate = LocalDate.now();
                String planStartDate = rs.getString(5);
                LocalDate planDate = LocalDate.parse(planStartDate); 
                LocalDate planEndDate = planDate.plusMonths(rs1.getInt(5));
                if(currentDate.isBefore(planEndDate))
                {
                    String planName = rs1.getString(2);
                    String data = rs1.getString(3);
                    String calls = rs1.getString(4);
                    String validity = rs1.getString(5) + " MONTH/S";
                    String price = "$ " + rs1.getString(6);
                    String startDate = rs.getString(5);
                    String rechargeDate = rs.getString(6);
                    table_model.addRow(new String[]{planName, data, calls, validity, price, startDate, rechargeDate});
                }
                query = "select provider_name from mob_service_providers where id = " + providerId + ";";
                ResultSet rs2 = MySql.selectQuery(query);
                if(rs2.isBeforeFirst())
                {
                  rs2.next();
                  providerField.setText(rs2.getString(1));
                }
              }
            }
            else
              JOptionPane.showMessageDialog(this, "Please recharge this mobile number to check active plans.", "Alert", JOptionPane.WARNING_MESSAGE);  
          }
          catch(SQLException ex)
          {
            System.out.println(ex);
          }
          finally
          {
            MySql.shutDownConn();
          }
        }
    }//GEN-LAST:event_checkActivePlanButtonActionPerformed
    public boolean clientSideValidation(JFrame frame, String mobNumber)
    {
        if(Pattern.compile("^\\d{10}$").matcher(mobNumber).matches())
        {
           return true;    
        }
        else
          JOptionPane.showMessageDialog(frame, "Mobile number is not valid.\nOnly numbers are allowed.", "Alert", JOptionPane.WARNING_MESSAGE);   
      return false;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MobilePayment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MobilePayment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MobilePayment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MobilePayment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MobilePayment().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton checkActivePlanButton;
    private javax.swing.JTextField checkMobNumber;
    private javax.swing.JTable checkMobPlansTable;
    private javax.swing.JButton checkPlansButton;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable mobilePlansTable;
    private javax.swing.JTextField providerField;
    private javax.swing.JTextField providerIdField;
    private javax.swing.JTextField rechargeMobNumberField;
    private javax.swing.JButton rechargeNumberButton;
    private javax.swing.JComboBox<String> rechargeProviderCombo;
    // End of variables declaration//GEN-END:variables
}
